# -*- coding: utf-8 -*-
"""ДЗ «Временные ряды, общая теория»

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1snHEUTXFWdW3sTK4iGmxamS8YFG4bsgs
"""

# Commented out IPython magic to ensure Python compatibility.
# импортируем необходимые бибилиотеки 
import pandas as pd
import numpy as np
from statsmodels.tsa.stattools import adfuller
import statsmodels.api as sm
import statsmodels.tsa.api as smt
from statsmodels.tsa.stattools import adfuller
import matplotlib.pyplot as plt
from scipy.stats import boxcox
# %matplotlib inline

"""# Загрузим необходимые датасеты """

sales_of_company_x = pd.read_csv('monthly-sales-of-company-x-jan-6.csv')
robberies_in_boston = pd.read_csv('monthly-boston-armed-robberies-j.csv')
airlines_passengers = pd.read_csv('international-airline-passengers.csv')
mean_monthly_temp = pd.read_csv('mean-monthly-air-temperature-deg.csv')
dowjones_closing = pd.read_csv('weekly-closings-of-the-dowjones-.csv')
female_births = pd.read_csv('daily-total-female-births-in-cal.csv')
carsales_quebec = pd.read_csv('monthly-car-sales-in-quebec-1960.csv')

all_series = {
    "Monthly sales of company X": sales_of_company_x["Count"],
    "Monthly Boston armed robberies": robberies_in_boston["Count"],
    "International airline passengers: monthly totals in thousands": airlines_passengers["Count"],
    "Mean monthly air temperature (Deg. F) Nottingham Castle": mean_monthly_temp["Deg"],
    "Weekly closings of the Dow-Jones industrial average": dowjones_closing["Close"],
    "Daily total female births in California": female_births["Count"],
    "Monthly car sales in quebec 1960": carsales_quebec["Count"]
}

with plt.style.context('bmh'):
    plt.figure(figsize=(16, 8))
    layout = (4, 2)
    for i, key in enumerate(all_series.keys()):
        x = i % 2
        y = int((i - x) / 2)
        
        ts_ax = plt.subplot2grid(layout, (y, x))
        all_series[key].plot(ax=ts_ax, color='blue')
        ts_ax.set_title(key)
        
    plt.tight_layout()

"""Гляда на данные графики можем предположить, что данные mean_monthly_temp и female_births отвечают критерию о стационарности. Проверим это с помощью теста Дики-Фуллера.

# Проведем тест Дики-Фуллера на непреобразованных данных
"""

def test_stationarity(timeseries):
    print('Results of Dickey-Fuller Test:')
    dftest = adfuller(timeseries, autolag='AIC')
    dfoutput = pd.Series(dftest[0:4], index=['Test Statistic', 'p-value', '#Lags Used', 'Number of Observations Used'])
    for [key, value] in dftest[4].items():
        dfoutput['Critical Value (%s)' % key] = value
    print(dfoutput)

def tsplot(y, lags=None, figsize=(10, 5), style='bmh'):
    test_stationarity(y)
    if not isinstance(y, pd.Series):
        y = pd.Series(y)
    with plt.style.context(style):
        plt.figure(figsize=figsize)
        layout = (4, 1)
        ts_ax = plt.subplot2grid(layout, (0, 0), rowspan=2)
        acf_ax = plt.subplot2grid(layout, (2, 0))
        pacf_ax = plt.subplot2grid(layout, (3, 0))

        y.plot(ax=ts_ax, color='blue', label='Or')
        ts_ax.set_title('Original')

        smt.graphics.plot_acf(y, lags=lags, ax=acf_ax, alpha=0.05)
        smt.graphics.plot_pacf(y, lags=lags, ax=pacf_ax, alpha=0.05)

        plt.tight_layout()
    return

tsplot(sales_of_company_x.Count)

tsplot(robberies_in_boston.Count)

tsplot(airlines_passengers.Count)

tsplot(mean_monthly_temp.Deg)

tsplot(dowjones_closing.Close)

tsplot(female_births.Count)

tsplot(carsales_quebec.Count)

"""По результатам данного теста видим, что данные в следующих датасетах отвечают критерию о стационарности:
- mean_monthly_temp
- female_births

# Уберем изменение дисперсии при помощи преобразования Бокса-Кокса данных с p-value превышающим 0.05.
"""

series_sales_of_company_x = boxcox(all_series["Monthly sales of company X"], 0)
series_robberies_in_boston = boxcox(all_series["Monthly Boston armed robberies"], 0)
series_airlines_passengers = boxcox(all_series["International airline passengers: monthly totals in thousands"], 0)
series_dowjones_closing = boxcox(all_series["Weekly closings of the Dow-Jones industrial average"], 0)
series_carsales_quebec = boxcox(all_series["Monthly car sales in quebec 1960"], 0)

with plt.style.context('bmh'):
        plt.figure(figsize=(10, 5))
        plt.plot(series_sales_of_company_x, color='blue')

with plt.style.context('bmh'):
        plt.figure(figsize=(10, 5))
        plt.plot(series_robberies_in_boston, color='blue')

with plt.style.context('bmh'):
        plt.figure(figsize=(10, 5))
        plt.plot(series_airlines_passengers, color='blue')

with plt.style.context('bmh'):
        plt.figure(figsize=(10, 5))
        plt.plot(series_dowjones_closing, color='blue')

with plt.style.context('bmh'):
        plt.figure(figsize=(10, 5))
        plt.plot(series_carsales_quebec, color='blue')

"""# Дифференцируем данные - это позволит нам убрать тренд """

series_sales_of_company_x = np.diff(series_sales_of_company_x, 1)
series_robberies_in_boston = np.diff(series_robberies_in_boston, 1)
series_airlines_passengers = np.diff(series_airlines_passengers, 1)
series_dowjones_closing = np.diff(series_dowjones_closing, 1)
series_carsales_quebec = np.diff(series_carsales_quebec, 1)

with plt.style.context('bmh'):
        plt.figure(figsize=(16, 8))
        plt.plot(series_sales_of_company_x, color='blue')

with plt.style.context('bmh'):
        plt.figure(figsize=(16, 8))
        plt.plot(series_robberies_in_boston, color='blue')

with plt.style.context('bmh'):
        plt.figure(figsize=(16, 8))
        plt.plot(series_airlines_passengers, color='blue')

with plt.style.context('bmh'):
        plt.figure(figsize=(16, 8))
        plt.plot(series_dowjones_closing, color='blue')

with plt.style.context('bmh'):
        plt.figure(figsize=(16, 8))
        plt.plot(series_carsales_quebec, color='blue')

"""# Проведем тест Дики-Фуллера повторно"""

tsplot(series_sales_of_company_x)

tsplot(series_robberies_in_boston)

tsplot(series_airlines_passengers)

"""Видим, что тест Дики-Фуллера и графики коррелограмм не отвергают гипотезу о нестационарности ряда в series_airlines_passengers. Уберем сезонность из данных."""

tsplot(series_dowjones_closing)

tsplot(series_carsales_quebec)

"""# Уберем сезонность из:
- series_airlines_passengers
- series_carsales_quebec
"""

series_airlines_passengers = series_airlines_passengers[12:] - series_airlines_passengers[:-12]
series_carsales_quebec = series_carsales_quebec[12:] - series_carsales_quebec[:-12]

tsplot(series_airlines_passengers)

tsplot(series_carsales_quebec)

"""Все рассмотренные временные ряды после преобразования имеют стационарный вид. """